// Generated by CoffeeScript 1.8.0
(function() {
  var $fs, $path, Fldoc, SourceCollector, async, exec, marked, pick, xml2js,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $fs = require('fs-extra');

  $path = require('path');

  async = require('async');

  pick = require('file-picker').pick;

  exec = require('done-exec');

  SourceCollector = require('./flutils').SourceCollector;

  xml2js = require('xml2js');

  marked = require('marked');

  Fldoc = (function() {
    function Fldoc(build) {
      this.build = build;
      this.printStore = __bind(this.printStore, this);
      this.read_classRec_from_toplevel_xml = __bind(this.read_classRec_from_toplevel_xml, this);
      this.readASDocDataXML = __bind(this.readASDocDataXML, this);
      this.create = __bind(this.create, this);
      this.createBuildCommand = __bind(this.createBuildCommand, this);
      this.addArg = __bind(this.addArg, this);
      this.addSourceDirectory = __bind(this.addSourceDirectory, this);
      this.setApacheFlexAsdoc = __bind(this.setApacheFlexAsdoc, this);
      this.setAdobeAsdoc = __bind(this.setAdobeAsdoc, this);
      this.setFilterFunction = __bind(this.setFilterFunction, this);
      this.collector = new SourceCollector(this.build);
    }

    Fldoc.externalAsdocs = [];

    Fldoc.externalFldocs = [];

    Fldoc.adobeAsdoc = 'http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/';

    Fldoc.apacheFlexAsdoc = 'http://flex.apache.org/asdoc/';

    Fldoc.prototype.setFilterFunction = function(func) {
      return this.filterFunction = func;
    };

    Fldoc.prototype.setAdobeAsdoc = function(url) {
      return this.adobeAsdoc = url;
    };

    Fldoc.prototype.setApacheFlexAsdoc = function(url) {
      this.apacheFlexAsdoc = url({
        setExternalAsdoc: (function(_this) {
          return function(url) {
            return _this.externalAsdocs.push(url);
          };
        })(this),
        setExternalFldoc: (function(_this) {
          return function(url) {
            return _this.externalFldocs.push(url);
          };
        })(this),
        addLibraryDirectory: (function(_this) {
          return function(path) {};
        })(this)
      });
      return this.collector.addLibraryDirectory(path);
    };

    Fldoc.prototype.addSourceDirectory = function(path) {
      return this.collector.addSourceDirectory(path);
    };

    Fldoc.prototype.addArg = function(arg) {
      return this.collector.addArg(arg);
    };

    Fldoc.prototype.createBuildCommand = function(output, complete) {
      var bin;
      bin = 'asdoc';
      return this.build.getSDKVersion((function(_this) {
        return function(version) {
          var args, directory, library, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
          if (_this.build.isWindow()) {
            if (version > '4.6.0') {
              bin = 'asdoc.bat';
            } else {
              bin = 'asdoc.exe';
            }
          }
          args = [];
          args.push(_this.build.wrap($path.join(_this.build.getEnv('FLEX_HOME'), 'bin', bin)));
          _ref = _this.collector.getLibraries();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            library = _ref[_i];
            args.push('-library-path ' + _this.build.wrap(library));
          }
          _ref1 = _this.collector.getExternalLibraries();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            library = _ref1[_j];
            args.push('-library-path ' + _this.build.wrap(library));
          }
          _ref2 = _this.collector.getSourceDirectories();
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            directory = _ref2[_k];
            args.push('-source-path ' + _this.build.wrap(directory));
          }
          return _this.collector.getIncludeClasses(_this.filterFunction, function(classPaths) {
            var arg, _l, _len3, _ref3;
            args.push('-doc-classes ' + classPaths.join(' '));
            _ref3 = _this.collector.getArgs();
            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
              arg = _ref3[_l];
              args.push(_this.build.applyEnv(arg));
            }
            args.push('-output ' + _this.build.wrap(_this.build.resolvePath(output)));
            args.push('-keep-xml=true');
            args.push('-skip-xsl=true');
            if (complete != null) {
              return complete(args.join(' '));
            }
          });
        };
      })(this));
    };

    Fldoc.prototype.cacheDirectoryName = '.asdoc_cache';

    Fldoc.prototype.create = function(outputDirectory, complete) {
      var tasks;
      this.outputDirectory = outputDirectory;
      this.store = {
        classes: {},
        namespaces: {},
        methods: {},
        properties: {}
      };
      tasks = [this.readASDocDataXML, this.printStore];
      return async.series(tasks, function(err) {
        console.log('');
        return complete();
      });
    };


    /*    
    	createASDocDataXML: (callback) =>
       	cacheDirectory = $path.normalize(@cacheDirectoryName)
       	
    		 * remove cache directory if exists
    		if $fs.existsSync(cacheDirectory)
    			$fs.removeSync(cacheDirectory) 
    		
    		@createBuildCommand cacheDirectory, (command) ->
    			exec(command).run (err) -> 
    				callback()
     */

    Fldoc.prototype.readASDocDataXML = function(callback) {
      var parser;
      parser = new xml2js.Parser();
      return parser.parseString($fs.readFileSync($path.join(this.cacheDirectoryName, 'toplevel.xml')), (function(_this) {
        return function(err, data) {
          var classRec, field, method, packageRec;
          classRec = data.asdoc.classRec;
          method = data.asdoc.method;
          field = data.asdoc.field;
          packageRec = data.asdoc.packageRec;
          _this.read_classRec_from_toplevel_xml(classRec);
          return callback();
        };
      })(this));
    };

    Fldoc.prototype.read_classRec_from_toplevel_xml = function(list) {
      var attrNames, elementNames, name, source, store, v, value, _i, _j, _len, _len1, _ref, _results;
      store = this.store;
      attrNames = {};
      elementNames = {};
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        source = list[_i];
        console.log(source);
        _ref = source['$'];
        for (name in _ref) {
          value = _ref[name];
          if (attrNames[name] == null) {
            attrNames[name] = [];
          }
          attrNames[name].push(value);
        }
        for (name in source) {
          value = source[name];
          if (name === '$') {
            continue;
          }
          if (elementNames[name] == null) {
            elementNames[name] = [];
          }
          elementNames[name].push(value);
        }
      }
      for (name in attrNames) {
        value = attrNames[name];
        console.log('attr', name);
        for (_j = 0, _len1 = value.length; _j < _len1; _j++) {
          v = value[_j];
          console.log('---', v);
        }
      }
      _results = [];
      for (name in elementNames) {
        value = elementNames[name];
        console.log('element', name);
        _results.push((function() {
          var _k, _len2, _results1;
          _results1 = [];
          for (_k = 0, _len2 = value.length; _k < _len2; _k++) {
            v = value[_k];
            _results1.push(console.log('---', v));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Fldoc.prototype.printStore = function() {
      var classes, methods, name, namespaces, properties, store, value, _results;
      store = this.store;
      classes = store.classes;
      namespaces = store.namespaces;
      methods = store.methods;
      properties = store.properties;
      console.log('==================== : namespaces');
      for (name in namespaces) {
        value = namespaces[name];
        console.log('------------ :', name);
        console.log(value);
      }
      console.log('==================== : classes');
      for (name in classes) {
        value = classes[name];
        console.log('------------ :', name);
        console.log(value);
      }
      console.log('==================== : methods');
      for (name in methods) {
        value = methods[name];
        console.log('------------ :', name);
        console.log(value);
      }
      console.log('==================== : properties');
      _results = [];
      for (name in properties) {
        value = properties[name];
        console.log('------------ :', name);
        _results.push(console.log(value));
      }
      return _results;
    };

    Fldoc.prototype.getAsdocIndex = function(url, complete) {};

    return Fldoc;

  })();

  module.exports = Fldoc;

}).call(this);
