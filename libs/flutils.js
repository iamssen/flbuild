// Generated by CoffeeScript 1.6.3
(function() {
  var SourceCollector, pick,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  pick = require('file-picker').pick;

  SourceCollector = (function() {
    function SourceCollector(build) {
      this.getArgs = __bind(this.getArgs, this);
      this.getIncludeClasses = __bind(this.getIncludeClasses, this);
      this.getSourceDirectories = __bind(this.getSourceDirectories, this);
      this.getExternalLibraries = __bind(this.getExternalLibraries, this);
      this.getLibraries = __bind(this.getLibraries, this);
      this.addArg = __bind(this.addArg, this);
      this.addSourceDirectory = __bind(this.addSourceDirectory, this);
      this.addExternalLibraryDirectory = __bind(this.addExternalLibraryDirectory, this);
      this.addLibraryDirectory = __bind(this.addLibraryDirectory, this);
      this.build = build;
      this.libraryDirectories = [];
      this.externalLibraryDirectories = [];
      this.sourceDirectories = [];
      this.args = [];
    }

    SourceCollector.prototype.addLibraryDirectory = function(path) {
      return this.libraryDirectories.push(path);
    };

    SourceCollector.prototype.addExternalLibraryDirectory = function(path) {
      return this.externalLibraryDirectories.push(path);
    };

    SourceCollector.prototype.addSourceDirectory = function(path) {
      return this.sourceDirectories.push(path);
    };

    SourceCollector.prototype.addArg = function(arg) {
      return this.args.push(arg);
    };

    SourceCollector.prototype.getLibraries = function() {
      var directory, libraries, libraryDirectories, _i, _len;
      libraryDirectories = this.build.resolvePaths(this.libraryDirectories.concat(this.build.getLibraryDirectories()));
      libraries = [];
      if (libraryDirectories && libraryDirectories.length > 0) {
        for (_i = 0, _len = libraryDirectories.length; _i < _len; _i++) {
          directory = libraryDirectories[_i];
          libraries = libraries.concat(this.build.getSwcListFromDirectory(directory));
        }
      }
      return libraries;
    };

    SourceCollector.prototype.getExternalLibraries = function() {
      var directory, libraries, libraryDirectories, _i, _len;
      libraryDirectories = this.build.resolvePaths(this.externalLibraryDirectories.concat(this.build.getExternalLibraryDirectories()));
      libraries = [];
      if (libraryDirectories && libraryDirectories.length > 0) {
        for (_i = 0, _len = libraryDirectories.length; _i < _len; _i++) {
          directory = libraryDirectories[_i];
          libraries = libraries.concat(this.build.getSwcListFromDirectory(directory));
        }
      }
      return libraries;
    };

    SourceCollector.prototype.getSourceDirectories = function() {
      return this.build.resolvePaths(this.sourceDirectories.concat(this.build.getSourceDirectories()));
    };

    SourceCollector.prototype.getIncludeClasses = function(filterFunction, callback) {
      var sourceDirectories,
        _this = this;
      sourceDirectories = this.build.resolvePaths(this.sourceDirectories.concat(this.build.getSourceDirectories()));
      return pick(sourceDirectories, ['.as', '.mxml'], function(files) {
        var classPaths, file, _i, _len;
        classPaths = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          file["class"] = _this.build.classfy(file);
          if (filterFunction != null) {
            if (filterFunction(file)) {
              classPaths.push(file["class"]);
            }
          } else {
            classPaths.push(file["class"]);
          }
        }
        return callback(classPaths);
      });
    };

    SourceCollector.prototype.getArgs = function() {
      return this.args.concat(this.build.getArgs());
    };

    return SourceCollector;

  })();

  exports.SourceCollector = SourceCollector;

}).call(this);

/*
//@ sourceMappingURL=flutils.map
*/
