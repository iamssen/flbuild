(function() {
  var $fs, $path, Flasset, SourceCollector, async, exec,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $fs = require('fs-extra');

  $path = require('path');

  async = require('async');

  exec = require('done-exec');

  SourceCollector = require('./flutils').SourceCollector;

  Flasset = (function() {
    function Flasset(build) {
      this.create = __bind(this.create, this);
      this.addAssetDirectory = __bind(this.addAssetDirectory, this);
      this.collector = new SourceCollector(build);
      this.build = build;
      this.assets = [];
    }

    Flasset.prototype.embed = function(extname, file, className) {
      switch (extname.toLowerCase()) {
        case '.jpg':
        case '.jpeg':
        case '.gif':
        case '.png':
        case '.svg':
        case '.mp3':
        case '.swf':
          return "[Embed(source='" + file + "')] public static const " + className + " : Class;";
        default:
          return "[Embed(source='" + file + "', mimeType='application/octet-stream')] public static const " + className + " : Class;";
      }
    };

    Flasset.prototype.addAssetDirectory = function(assetClassPath, directory) {
      return this.assets.push({
        assetClassPath: assetClassPath,
        directory: directory
      });
    };

    Flasset.prototype.create = function(output, complete) {
      var cacheDirectory, classNameReg, embed, task;
      cacheDirectory = $path.normalize('.assets_cache');
      classNameReg = /^[A-Za-z][A-Za-z0-9_]+/;
      embed = this.embed;
      this.collector.addSourceDirectory($path.join(cacheDirectory, 'src'));
      if ($fs.existsSync(cacheDirectory)) {
        $fs.removeSync(cacheDirectory);
      }
      task = function(obj, next) {
        var assetClassPath, className, directory, namespace, paths, sourceDirectory;
        assetClassPath = obj['assetClassPath'];
        directory = obj['directory'];
        paths = assetClassPath.split('.');
        className = paths.pop();
        namespace = paths.join('.');
        paths.unshift(cacheDirectory, 'src');
        sourceDirectory = paths.join('/');
        return $fs.mkdirs(sourceDirectory, function(err) {
          if (err != null) {
            next(err);
            return;
          }
          return $fs.copy(directory, sourceDirectory, function(err) {
            var embeds, extname, file, fileClassName, files, source, stat, _i, _len;
            if (err != null) {
              next(err);
              return;
            }
            files = $fs.readdirSync(sourceDirectory);
            embeds = [];
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              file = files[_i];
              stat = $fs.statSync($path.join(sourceDirectory, file));
              extname = $path.extname(file);
              fileClassName = file.replace(extname, '');
              if (stat.isFile() && classNameReg.test(fileClassName)) {
                embeds.push(embed(extname, file, fileClassName));
              }
            }
            source = "package " + namespace + " {\npublic class " + className + " {\n" + (embeds.join('\n')) + "\n}\n}";
            return $fs.writeFile($path.join(sourceDirectory, "" + className + ".as"), source, {
              encoding: 'utf8'
            }, function(err) {
              if (err != null) {
                next(err);
                return;
              }
              return next();
            });
          });
        });
      };
      return async.eachSeries(this.assets, task, (function(_this) {
        return function(err) {
          var bin;
          if (err != null) {
            complete(err);
            return;
          }
          bin = 'compc';
          return _this.build.getSDKVersion(function(version) {
            var args, directory, library, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
            if (process.platform.indexOf('win') === 0) {
              if (version > '4.6.0') {
                bin = 'compc.bat';
              } else {
                bin = 'compc.exe';
              }
            }
            args = [];
            args.push(_this.build.wrap(_this.build.getEnv('FLEX_HOME') + '/bin/' + bin));
            _ref = _this.collector.getLibraries();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              library = _ref[_i];
              args.push('-library-path ' + _this.build.wrap(library));
            }
            _ref1 = _this.collector.getExternalLibraries();
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              library = _ref1[_j];
              args.push('-external-library-path ' + _this.build.wrap(library));
            }
            _ref2 = _this.collector.getSourceDirectories();
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              directory = _ref2[_k];
              args.push('-source-path ' + _this.build.wrap(directory));
              args.push('-include-sources ' + _this.build.wrap(directory));
            }
            args.push('-output ' + _this.build.wrap(_this.build.resolvePath(output)));
            return exec(args.join(' ')).run(function() {
              if ($fs.existsSync(cacheDirectory)) {
                $fs.removeSync(cacheDirectory);
              }
              console.log(cacheDirectory);
              return complete();
            });
          });
        };
      })(this));
    };

    return Flasset;

  })();

  module.exports = Flasset;

}).call(this);

//# sourceMappingURL=data:application/json;base64,