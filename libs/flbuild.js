(function() {
  var $fs, $path, Flapp, Flasset, Flbuild, Fllib, Flmodule, parseXml,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $path = require('path');

  $fs = require('fs');

  parseXml = require('xml2js').parseString;

  Fllib = require('./fllib');

  Flapp = require('./flapp');

  Flmodule = require('./flmodule');

  Flasset = require('./flasset');

  Flbuild = (function() {
    function Flbuild() {
      this.getAssetCreator = __bind(this.getAssetCreator, this);
      this.getModuleCreator = __bind(this.getModuleCreator, this);
      this.getApplicationCreator = __bind(this.getApplicationCreator, this);
      this.getLibraryCreator = __bind(this.getLibraryCreator, this);
      this.resolvePaths = __bind(this.resolvePaths, this);
      this.resolvePath = __bind(this.resolvePath, this);
      this.getSDKVersion = __bind(this.getSDKVersion, this);
      this.getEnv = __bind(this.getEnv, this);
      this.applyEnv = __bind(this.applyEnv, this);
      this.setEnv = __bind(this.setEnv, this);
      this.getArgs = __bind(this.getArgs, this);
      this.getSourceDirectories = __bind(this.getSourceDirectories, this);
      this.getExternalLibraryDirectories = __bind(this.getExternalLibraryDirectories, this);
      this.getLibraryDirectories = __bind(this.getLibraryDirectories, this);
      this.addArg = __bind(this.addArg, this);
      this.addSourceDirectory = __bind(this.addSourceDirectory, this);
      this.addExternalLibraryDirectory = __bind(this.addExternalLibraryDirectory, this);
      this.addLibraryDirectory = __bind(this.addLibraryDirectory, this);
      this.envs = {};
      this.libraryDirectories = [];
      this.externalLibraryDirectories = [];
      this.sourceDirectories = [];
      this.args = ['-locale en_US'];
    }

    Flbuild.prototype.addLibraryDirectory = function(path) {
      return this.libraryDirectories.push(path);
    };

    Flbuild.prototype.addExternalLibraryDirectory = function(path) {
      return this.externalLibraryDirectories.push(path);
    };

    Flbuild.prototype.addSourceDirectory = function(path) {
      return this.sourceDirectories.push(path);
    };

    Flbuild.prototype.addArg = function(arg) {
      return this.args.push(arg);
    };

    Flbuild.prototype.getLibraryDirectories = function() {
      return this.libraryDirectories;
    };

    Flbuild.prototype.getExternalLibraryDirectories = function() {
      return this.externalLibraryDirectories;
    };

    Flbuild.prototype.getSourceDirectories = function() {
      return this.sourceDirectories;
    };

    Flbuild.prototype.getArgs = function() {
      return this.args;
    };

    Flbuild.prototype.setEnv = function(name, value) {
      if (value == null) {
        value = process.env[name];
      }
      return this.envs[name] = value;
    };

    Flbuild.prototype.applyEnv = function(str) {
      var name, reg, value, _ref;
      _ref = this.envs;
      for (name in _ref) {
        value = _ref[name];
        reg = new RegExp('\\$' + name, 'g');
        str = str.replace(reg, value);
      }
      return str;
    };

    Flbuild.prototype.getEnv = function(name) {
      return this.envs[name];
    };

    Flbuild.prototype.getSDKVersion = function(done) {
      var xmlstr;
      if (!this.sdkDescription) {
        xmlstr = $fs.readFileSync(this.getEnv('FLEX_HOME') + '/flex-sdk-description.xml', {
          encoding: 'utf8'
        });
        return parseXml(xmlstr, function(err, result) {
          this.sdkDescription = result;
          return done(this.sdkDescription.version);
        });
      } else {
        return done(this.sdkDescription.version);
      }
    };

    Flbuild.prototype.resolvePath = function(path) {
      path = this.applyEnv(path);
      return $path.resolve(path);
    };

    Flbuild.prototype.resolvePaths = function(paths) {
      var newPaths, path, _i, _len;
      newPaths = [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        newPaths.push(this.resolvePath(path));
      }
      return newPaths;
    };

    Flbuild.prototype.getLibraryCreator = function() {
      return new Fllib(this);
    };

    Flbuild.prototype.getApplicationCreator = function() {
      return new Flapp(this);
    };

    Flbuild.prototype.getModuleCreator = function() {
      return new Flmodule(this);
    };

    Flbuild.prototype.getAssetCreator = function() {
      return new Flasset(this);
    };

    Flbuild.prototype.isWindow = function() {
      return process.platform.indexOf('win') === 0;
    };

    Flbuild.prototype.wrap = function(path) {
      path = "\"" + path + "\"";
      if (this.isWindow()) {
        path.replace(/\//g, "\\");
      }
      return path;
    };

    Flbuild.prototype.getSwcListFromDirectory = function(path) {
      var file, files, swcs, _i, _len;
      swcs = [];
      if ($fs.existsSync(path)) {
        files = $fs.readdirSync(path);
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (file.lastIndexOf('.swc') > -1) {
            swcs.push($path.join(path, file));
          }
        }
      }
      return swcs;
    };

    Flbuild.prototype.classfy = function(file) {
      var classPath;
      classPath = file.relative_base.split('/').join('.') + '.' + file.name;
      if (classPath.charAt(0) === '.') {
        classPath = classPath.substr(1);
      }
      return classPath;
    };

    return Flbuild;

  })();

  module.exports = Flbuild;

}).call(this);

//# sourceMappingURL=data:application/json;base64,