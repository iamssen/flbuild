(function() {
  var $fs, $path, Flapp, Flasset, Flbuild, Fldoc, Fllib, Flmodule, parseXml,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $path = require('path');

  $fs = require('fs');

  parseXml = require('xml2js').parseString;

  Fllib = require('./fllib');

  Flapp = require('./flapp');

  Flmodule = require('./flmodule');

  Flasset = require('./flasset');

  Fldoc = require('./fldoc');

  Flbuild = (function() {
    function Flbuild() {
      this.getDocCreator = __bind(this.getDocCreator, this);
      this.getAssetCreator = __bind(this.getAssetCreator, this);
      this.getModuleCreator = __bind(this.getModuleCreator, this);
      this.getApplicationCreator = __bind(this.getApplicationCreator, this);
      this.getLibraryCreator = __bind(this.getLibraryCreator, this);
      this.resolvePaths = __bind(this.resolvePaths, this);
      this.resolvePath = __bind(this.resolvePath, this);
      this.getSDKVersion = __bind(this.getSDKVersion, this);
      this.getEnv = __bind(this.getEnv, this);
      this.applyEnv = __bind(this.applyEnv, this);
      this.setEnv = __bind(this.setEnv, this);
      this.getArgs = __bind(this.getArgs, this);
      this.getSourceDirectories = __bind(this.getSourceDirectories, this);
      this.getExternalLibraryDirectories = __bind(this.getExternalLibraryDirectories, this);
      this.getLibraryDirectories = __bind(this.getLibraryDirectories, this);
      this.addArg = __bind(this.addArg, this);
      this.addSourceDirectory = __bind(this.addSourceDirectory, this);
      this.addExternalLibraryDirectory = __bind(this.addExternalLibraryDirectory, this);
      this.addLibraryDirectory = __bind(this.addLibraryDirectory, this);
      this.envs = {};
      this.libraryDirectories = [];
      this.externalLibraryDirectories = [];
      this.sourceDirectories = [];
      this.args = ['-locale en_US'];
    }

    Flbuild.prototype.addLibraryDirectory = function(path) {
      return this.libraryDirectories.push(path);
    };

    Flbuild.prototype.addExternalLibraryDirectory = function(path) {
      return this.externalLibraryDirectories.push(path);
    };

    Flbuild.prototype.addSourceDirectory = function(path) {
      return this.sourceDirectories.push(path);
    };

    Flbuild.prototype.addArg = function(arg) {
      return this.args.push(arg);
    };

    Flbuild.prototype.getLibraryDirectories = function() {
      return this.libraryDirectories;
    };

    Flbuild.prototype.getExternalLibraryDirectories = function() {
      return this.externalLibraryDirectories;
    };

    Flbuild.prototype.getSourceDirectories = function() {
      return this.sourceDirectories;
    };

    Flbuild.prototype.getArgs = function() {
      return this.args;
    };

    Flbuild.prototype.setEnv = function(name, value) {
      if (value == null) {
        value = process.env[name];
      }
      return this.envs[name] = value;
    };

    Flbuild.prototype.applyEnv = function(str) {
      var name, reg, value, _ref;
      _ref = this.envs;
      for (name in _ref) {
        value = _ref[name];
        reg = new RegExp('\\$' + name, 'g');
        str = str.replace(reg, value);
      }
      return str;
    };

    Flbuild.prototype.getEnv = function(name) {
      return this.envs[name];
    };

    Flbuild.prototype.getSDKVersion = function(done) {
      var xmlstr;
      if (!this.sdkDescription) {
        xmlstr = $fs.readFileSync(this.getEnv('FLEX_HOME') + '/flex-sdk-description.xml', {
          encoding: 'utf8'
        });
        return parseXml(xmlstr, function(err, result) {
          this.sdkDescription = result;
          return done(this.sdkDescription.version);
        });
      } else {
        return done(this.sdkDescription.version);
      }
    };

    Flbuild.prototype.resolvePath = function(path) {
      path = this.applyEnv(path);
      return $path.resolve(path);
    };

    Flbuild.prototype.resolvePaths = function(paths) {
      var newPaths, path, _i, _len;
      newPaths = [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        newPaths.push(this.resolvePath(path));
      }
      return newPaths;
    };

    Flbuild.prototype.getLibraryCreator = function() {
      return new Fllib(this);
    };

    Flbuild.prototype.getApplicationCreator = function() {
      return new Flapp(this);
    };

    Flbuild.prototype.getModuleCreator = function() {
      return new Flmodule(this);
    };

    Flbuild.prototype.getAssetCreator = function() {
      return new Flasset(this);
    };

    Flbuild.prototype.getDocCreator = function() {
      return new Fldoc(this);
    };

    Flbuild.prototype.isWindow = function() {
      return process.platform.indexOf('win') === 0;
    };

    Flbuild.prototype.wrap = function(path) {
      path = "\"" + path + "\"";
      if (this.isWindow()) {
        path.replace(/\//g, "\\");
      }
      return path;
    };

    Flbuild.prototype.getSwcListFromDirectory = function(path) {
      var file, files, swcs, _i, _len;
      swcs = [];
      if ($fs.existsSync(path)) {
        files = $fs.readdirSync(path);
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (file.lastIndexOf('.swc') > -1) {
            swcs.push($path.join(path, file));
          }
        }
      }
      return swcs;
    };

    Flbuild.prototype.classfy = function(file) {
      var classPath;
      classPath = file.relative_base.split('/').join('.') + '.' + file.name;
      if (classPath.charAt(0) === '.') {
        classPath = classPath.substr(1);
      }
      return classPath;
    };

    return Flbuild;

  })();

  module.exports = Flbuild;

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QUEsU0FBQSxHQUFZLFNBQVMsQ0FBQyxNQUFWLENBQWlCLENBQWpCLENBQVosQ0FBQTtPQURBO2FBRUEsVUFIUTtJQUFBLENBOUdULENBQUE7O21CQUFBOztNQVhELENBQUE7O0FBQUEsRUE4SEEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsT0E5SGpCLENBQUE7QUFBQSIsImZpbGUiOiJmbGJ1aWxkLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiJHBhdGggPSByZXF1aXJlKCdwYXRoJylcbiRmcyA9IHJlcXVpcmUoJ2ZzJylcbnBhcnNlWG1sID0gcmVxdWlyZSgneG1sMmpzJykucGFyc2VTdHJpbmdcblxuRmxsaWIgPSByZXF1aXJlKCcuL2ZsbGliJylcbkZsYXBwID0gcmVxdWlyZSgnLi9mbGFwcCcpXG5GbG1vZHVsZSA9IHJlcXVpcmUoJy4vZmxtb2R1bGUnKVxuRmxhc3NldCA9IHJlcXVpcmUoJy4vZmxhc3NldCcpXG5GbGRvYyA9IHJlcXVpcmUoJy4vZmxkb2MnKVxuXG5jbGFzcyBGbGJ1aWxkXG5cdGNvbnN0cnVjdG9yOiAoKSAtPlxuXHRcdEBlbnZzID0ge31cblxuXHRcdEBsaWJyYXJ5RGlyZWN0b3JpZXMgPSBbXVxuXHRcdEBleHRlcm5hbExpYnJhcnlEaXJlY3RvcmllcyA9IFtdXG5cdFx0QHNvdXJjZURpcmVjdG9yaWVzID0gW11cblx0XHRAYXJncyA9IFsnLWxvY2FsZSBlbl9VUyddXG5cblx0Iz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQjIHNvdXJjZSBjb2xsZWN0XG5cdCM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0IyBzZXR0ZXJzXG5cdCMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdGFkZExpYnJhcnlEaXJlY3Rvcnk6IChwYXRoKSA9PlxuXHRcdEBsaWJyYXJ5RGlyZWN0b3JpZXMucHVzaChwYXRoKVxuXG5cdGFkZEV4dGVybmFsTGlicmFyeURpcmVjdG9yeTogKHBhdGgpID0+XG5cdFx0QGV4dGVybmFsTGlicmFyeURpcmVjdG9yaWVzLnB1c2gocGF0aClcblxuXHRhZGRTb3VyY2VEaXJlY3Rvcnk6IChwYXRoKSA9PlxuXHRcdEBzb3VyY2VEaXJlY3Rvcmllcy5wdXNoKHBhdGgpXG5cblx0YWRkQXJnOiAoYXJnKSA9PlxuXHRcdEBhcmdzLnB1c2goYXJnKVxuXG5cdCMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCMgZ2V0dGVyc1xuXHQjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRnZXRMaWJyYXJ5RGlyZWN0b3JpZXM6ID0+IEBsaWJyYXJ5RGlyZWN0b3JpZXNcblxuXHRnZXRFeHRlcm5hbExpYnJhcnlEaXJlY3RvcmllczogPT4gQGV4dGVybmFsTGlicmFyeURpcmVjdG9yaWVzXG5cblx0Z2V0U291cmNlRGlyZWN0b3JpZXM6ID0+IEBzb3VyY2VEaXJlY3Rvcmllc1xuXG5cdGdldEFyZ3M6ID0+IEBhcmdzXG5cblx0Iz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQjIGVudmlyb25tZW50IHZhcmlhYmxlcyBjb250cm9sXG5cdCM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0c2V0RW52OiAobmFtZSwgdmFsdWUpID0+XG5cdFx0dmFsdWUgPSBwcm9jZXNzLmVudltuYW1lXSBpZiBub3QgdmFsdWU/XG5cdFx0QGVudnNbbmFtZV0gPSB2YWx1ZVxuXG5cdGFwcGx5RW52OiAoc3RyKSA9PlxuXHRcdGZvciBuYW1lLCB2YWx1ZSBvZiBAZW52c1xuXHRcdFx0cmVnID0gbmV3IFJlZ0V4cCgnXFxcXCQnICsgbmFtZSwgJ2cnKVxuXHRcdFx0c3RyID0gc3RyLnJlcGxhY2UocmVnLCB2YWx1ZSlcblx0XHRzdHJcblxuXHRnZXRFbnY6IChuYW1lKSA9PlxuXHRcdEBlbnZzW25hbWVdXG5cblx0Z2V0U0RLVmVyc2lvbjogKGRvbmUpID0+XG5cdFx0aWYgbm90IEBzZGtEZXNjcmlwdGlvblxuXHRcdFx0eG1sc3RyID0gJGZzLnJlYWRGaWxlU3luYyhAZ2V0RW52KCdGTEVYX0hPTUUnKSArICcvZmxleC1zZGstZGVzY3JpcHRpb24ueG1sJywge2VuY29kaW5nOid1dGY4J30pXG5cdFx0XHRwYXJzZVhtbCB4bWxzdHIsIChlcnIsIHJlc3VsdCktPlxuXHRcdFx0XHRAc2RrRGVzY3JpcHRpb24gPSByZXN1bHRcblx0XHRcdFx0ZG9uZShAc2RrRGVzY3JpcHRpb24udmVyc2lvbilcblx0XHRlbHNlXG5cdFx0XHRkb25lKEBzZGtEZXNjcmlwdGlvbi52ZXJzaW9uKVxuXG5cblx0Iz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQjIHJlc29sdmUgcGF0aCBjb250cm9sIDogZGVwZW5kZW50IGVudmlyb25tZW50IHZhcmlhYmxlcyBjb250cm9sXG5cdCM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0cmVzb2x2ZVBhdGg6IChwYXRoKSA9PlxuXHRcdHBhdGggPSBAYXBwbHlFbnYocGF0aClcblx0XHQkcGF0aC5yZXNvbHZlKHBhdGgpXG5cblx0cmVzb2x2ZVBhdGhzOiAocGF0aHMpID0+XG5cdFx0bmV3UGF0aHMgPSBbXVxuXHRcdGZvciBwYXRoIGluIHBhdGhzXG5cdFx0XHRuZXdQYXRocy5wdXNoKEByZXNvbHZlUGF0aChwYXRoKSlcblx0XHRuZXdQYXRoc1xuXG5cdCM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0IyBjcmVhdGUgaW5zdGFuY2Vcblx0Iz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHRnZXRMaWJyYXJ5Q3JlYXRvcjogKCkgPT4gbmV3IEZsbGliKEApXG5cblx0Z2V0QXBwbGljYXRpb25DcmVhdG9yOiAoKSA9PiBuZXcgRmxhcHAoQClcblxuXHRnZXRNb2R1bGVDcmVhdG9yOiAoKSA9PiBuZXcgRmxtb2R1bGUoQClcblxuXHRnZXRBc3NldENyZWF0b3I6ICgpID0+IG5ldyBGbGFzc2V0KEApXG5cdFxuXHRnZXREb2NDcmVhdG9yOiAoKSA9PiBuZXcgRmxkb2MoQClcblxuXHQjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCMgdXRpbHNcblx0Iz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHRpc1dpbmRvdzogKCkgLT4gcHJvY2Vzcy5wbGF0Zm9ybS5pbmRleE9mKCd3aW4nKSBpcyAwXG5cdFxuXHR3cmFwOiAocGF0aCkgLT5cblx0XHRwYXRoID0gXCJcXFwiI3twYXRofVxcXCJcIlxuXHRcdHBhdGgucmVwbGFjZSgvXFwvL2csIFwiXFxcXFwiKSBpZiBAaXNXaW5kb3coKVxuXHRcdHJldHVybiBwYXRoXG5cblx0Z2V0U3djTGlzdEZyb21EaXJlY3Rvcnk6IChwYXRoKSAtPlxuXHRcdHN3Y3MgPSBbXVxuXHRcdGlmICRmcy5leGlzdHNTeW5jKHBhdGgpXG5cdFx0XHRmaWxlcyA9ICRmcy5yZWFkZGlyU3luYyhwYXRoKVxuXG5cdFx0XHRmb3IgZmlsZSBpbiBmaWxlc1xuXHRcdFx0XHRpZiBmaWxlLmxhc3RJbmRleE9mKCcuc3djJykgPiAtMVxuXHRcdFx0XHRcdHN3Y3MucHVzaCgkcGF0aC5qb2luKHBhdGgsIGZpbGUpKVxuXHRcdHN3Y3NcblxuXHQjIGZpbGUgZnJvbSByZXF1aXJlKCdmaWxlLXBpY2tlcicpXG5cdGNsYXNzZnk6IChmaWxlKSAtPlxuXHRcdGNsYXNzUGF0aCA9IGZpbGUucmVsYXRpdmVfYmFzZS5zcGxpdCgnLycpLmpvaW4oJy4nKSArICcuJyArIGZpbGUubmFtZVxuXHRcdGNsYXNzUGF0aCA9IGNsYXNzUGF0aC5zdWJzdHIoMSkgaWYgY2xhc3NQYXRoLmNoYXJBdCgwKSBpcyAnLidcblx0XHRjbGFzc1BhdGhcblxubW9kdWxlLmV4cG9ydHMgPSBGbGJ1aWxkIl19