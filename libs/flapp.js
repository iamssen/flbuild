(function() {
  var Flapp, SourceCollector, exec, pick,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  pick = require('file-picker').pick;

  exec = require('done-exec');

  SourceCollector = require('./flutils').SourceCollector;

  Flapp = (function() {
    function Flapp(build) {
      this.create = __bind(this.create, this);
      this.createBuildCommand = __bind(this.createBuildCommand, this);
      this.addArg = __bind(this.addArg, this);
      this.addSourceDirectory = __bind(this.addSourceDirectory, this);
      this.addExternalLibraryDirectory = __bind(this.addExternalLibraryDirectory, this);
      this.addLibraryDirectory = __bind(this.addLibraryDirectory, this);
      this.collector = new SourceCollector(build);
      this.build = build;
    }

    Flapp.prototype.addLibraryDirectory = function(path) {
      return this.collector.addLibraryDirectory(path);
    };

    Flapp.prototype.addExternalLibraryDirectory = function(path) {
      return this.collector.addExternalLibraryDirectory(path);
    };

    Flapp.prototype.addSourceDirectory = function(path) {
      return this.collector.addSourceDirectory(path);
    };

    Flapp.prototype.addArg = function(arg) {
      return this.collector.addArg(arg);
    };

    Flapp.prototype.createBuildCommand = function(source, output, complete) {
      var bin;
      bin = 'mxmlc';
      return this.build.getSDKVersion((function(_this) {
        return function(version) {
          var arg, args, directory, library, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
          if (process.platform.indexOf('win') === 0) {
            if (version > '4.6.0') {
              bin = 'mxmlc.bat';
            } else {
              bin = 'mxmlc.exe';
            }
          }
          args = [];
          args.push(_this.build.wrap(_this.build.getEnv('FLEX_HOME') + '/bin/' + bin));
          args.push(_this.build.wrap(_this.build.resolvePath(source)));
          _ref = _this.collector.getLibraries();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            library = _ref[_i];
            args.push('-library-path ' + _this.build.wrap(library));
          }
          _ref1 = _this.collector.getExternalLibraries();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            library = _ref1[_j];
            args.push('-external-library-path ' + _this.build.wrap(library));
          }
          _ref2 = _this.collector.getSourceDirectories();
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            directory = _ref2[_k];
            args.push('-source-path ' + _this.build.wrap(directory));
          }
          _ref3 = _this.collector.getArgs();
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            arg = _ref3[_l];
            args.push(_this.build.applyEnv(arg));
          }
          output = _this.build.wrap(_this.build.resolvePath(output));
          args.push('-link-report ' + output.replace('.swf', '.xml'));
          args.push('-size-report ' + output.replace('.swf', '.size.xml'));
          args.push('-output ' + output);
          if (complete != null) {
            return complete(args.join(' '));
          }
        };
      })(this));
    };

    Flapp.prototype.create = function(source, output, complete) {
      return this.createBuildCommand(source, output, function(command) {
        return exec(command).run(complete);
      });
    };

    return Flapp;

  })();

  module.exports = Flapp;

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QyxTQUFDLE9BQUQsR0FBQTtlQUNuQyxJQUFBLENBQUssT0FBTCxDQUFhLENBQUMsR0FBZCxDQUFrQixRQUFsQixFQURtQztNQUFBLENBQXBDLEVBRE87SUFBQSxDQXhFUixDQUFBOztpQkFBQTs7TUFMRCxDQUFBOztBQUFBLEVBa0ZBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBbEZqQixDQUFBO0FBQUEiLCJmaWxlIjoiZmxhcHAuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJwaWNrID0gcmVxdWlyZSgnZmlsZS1waWNrZXInKS5waWNrXG5leGVjID0gcmVxdWlyZSgnZG9uZS1leGVjJylcbntTb3VyY2VDb2xsZWN0b3J9ID0gcmVxdWlyZSgnLi9mbHV0aWxzJylcblxuY2xhc3MgRmxhcHBcblx0Y29uc3RydWN0b3I6IChidWlsZCkgLT5cblx0XHRAY29sbGVjdG9yID0gbmV3IFNvdXJjZUNvbGxlY3RvcihidWlsZClcblx0XHRAYnVpbGQgPSBidWlsZFxuXG5cdCM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0IyBzZXR0aW5nXG5cdCM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0YWRkTGlicmFyeURpcmVjdG9yeTogKHBhdGgpID0+XG5cdFx0QGNvbGxlY3Rvci5hZGRMaWJyYXJ5RGlyZWN0b3J5KHBhdGgpXG5cblx0YWRkRXh0ZXJuYWxMaWJyYXJ5RGlyZWN0b3J5OiAocGF0aCkgPT5cblx0XHRAY29sbGVjdG9yLmFkZEV4dGVybmFsTGlicmFyeURpcmVjdG9yeShwYXRoKVxuXG5cdGFkZFNvdXJjZURpcmVjdG9yeTogKHBhdGgpID0+XG5cdFx0QGNvbGxlY3Rvci5hZGRTb3VyY2VEaXJlY3RvcnkocGF0aClcblxuXHRhZGRBcmc6IChhcmcpID0+XG5cdFx0QGNvbGxlY3Rvci5hZGRBcmcoYXJnKVxuXG5cdCM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0IyBidWlsZFxuXHQjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdGNyZWF0ZUJ1aWxkQ29tbWFuZDogKHNvdXJjZSwgb3V0cHV0LCBjb21wbGV0ZSkgPT5cblx0XHQjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdCMgMCBnZXQgZXhlYyBmaWxlXG5cdFx0Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRiaW4gPSAnbXhtbGMnXG5cblx0XHRAYnVpbGQuZ2V0U0RLVmVyc2lvbiAodmVyc2lvbikgPT5cblx0XHRcdGlmIHByb2Nlc3MucGxhdGZvcm0uaW5kZXhPZignd2luJykgaXMgMFxuXHRcdFx0XHRpZiB2ZXJzaW9uID4gJzQuNi4wJ1xuXHRcdFx0XHRcdGJpbiA9ICdteG1sYy5iYXQnXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRiaW4gPSAnbXhtbGMuZXhlJ1xuXG5cdFx0XHQjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFx0IyAxIGNyZWF0ZSBwYXRoIGFyZ3Ncblx0XHRcdCMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0XHRhcmdzID0gW11cblxuXHRcdFx0YXJncy5wdXNoKEBidWlsZC53cmFwKEBidWlsZC5nZXRFbnYoJ0ZMRVhfSE9NRScpICsgJy9iaW4vJyArIGJpbikpXG5cblx0XHRcdGFyZ3MucHVzaChAYnVpbGQud3JhcChAYnVpbGQucmVzb2x2ZVBhdGgoc291cmNlKSkpXG5cblx0XHRcdGZvciBsaWJyYXJ5IGluIEBjb2xsZWN0b3IuZ2V0TGlicmFyaWVzKClcblx0XHRcdFx0YXJncy5wdXNoKCctbGlicmFyeS1wYXRoICcgKyBAYnVpbGQud3JhcChsaWJyYXJ5KSlcblxuXHRcdFx0Zm9yIGxpYnJhcnkgaW4gQGNvbGxlY3Rvci5nZXRFeHRlcm5hbExpYnJhcmllcygpXG5cdFx0XHRcdGFyZ3MucHVzaCgnLWV4dGVybmFsLWxpYnJhcnktcGF0aCAnICsgQGJ1aWxkLndyYXAobGlicmFyeSkpXG5cblx0XHRcdGZvciBkaXJlY3RvcnkgaW4gQGNvbGxlY3Rvci5nZXRTb3VyY2VEaXJlY3RvcmllcygpXG5cdFx0XHRcdGFyZ3MucHVzaCgnLXNvdXJjZS1wYXRoICcgKyBAYnVpbGQud3JhcChkaXJlY3RvcnkpKVxuXG5cdFx0XHQjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFx0IyAyIGFyZ3MsIG91dHB1dFxuXHRcdFx0Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdGZvciBhcmcgaW4gQGNvbGxlY3Rvci5nZXRBcmdzKClcblx0XHRcdFx0YXJncy5wdXNoKEBidWlsZC5hcHBseUVudihhcmcpKVxuXG5cdFx0XHRvdXRwdXQgPSBAYnVpbGQud3JhcChAYnVpbGQucmVzb2x2ZVBhdGgob3V0cHV0KSlcblxuXHRcdFx0IyBsaW5rLXJlcG9ydFxuXHRcdFx0YXJncy5wdXNoKCctbGluay1yZXBvcnQgJyArIG91dHB1dC5yZXBsYWNlKCcuc3dmJywgJy54bWwnKSlcblxuXHRcdFx0IyBzaXplLXJlcG9ydFxuXHRcdFx0YXJncy5wdXNoKCctc2l6ZS1yZXBvcnQgJyArIG91dHB1dC5yZXBsYWNlKCcuc3dmJywgJy5zaXplLnhtbCcpKVxuXG5cdFx0XHQjIHN3ZlxuXHRcdFx0YXJncy5wdXNoKCctb3V0cHV0ICcgKyBvdXRwdXQpXG5cblx0XHRcdGNvbXBsZXRlKGFyZ3Muam9pbignICcpKSBpZiBjb21wbGV0ZT9cblx0XHRcdFxuXHRjcmVhdGU6IChzb3VyY2UsIG91dHB1dCwgY29tcGxldGUpID0+XG5cdFx0QGNyZWF0ZUJ1aWxkQ29tbWFuZCBzb3VyY2UsIG91dHB1dCwgKGNvbW1hbmQpIC0+XG5cdFx0XHRleGVjKGNvbW1hbmQpLnJ1bihjb21wbGV0ZSlcblx0XHRcblxubW9kdWxlLmV4cG9ydHMgPSBGbGFwcCJdfQ==