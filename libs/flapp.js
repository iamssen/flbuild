(function() {
  var $path, Flapp, SourceCollector, exec, pick,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  pick = require('file-picker').pick;

  exec = require('done-exec');

  $path = require('path');

  SourceCollector = require('./flutils').SourceCollector;

  Flapp = (function() {
    function Flapp(build) {
      this.create = __bind(this.create, this);
      this.createBuildCommand = __bind(this.createBuildCommand, this);
      this.addArg = __bind(this.addArg, this);
      this.addSourceDirectory = __bind(this.addSourceDirectory, this);
      this.addExternalLibraryDirectory = __bind(this.addExternalLibraryDirectory, this);
      this.addLibraryDirectory = __bind(this.addLibraryDirectory, this);
      this.collector = new SourceCollector(build);
      this.build = build;
    }

    Flapp.prototype.addLibraryDirectory = function(path) {
      return this.collector.addLibraryDirectory(path);
    };

    Flapp.prototype.addExternalLibraryDirectory = function(path) {
      return this.collector.addExternalLibraryDirectory(path);
    };

    Flapp.prototype.addSourceDirectory = function(path) {
      return this.collector.addSourceDirectory(path);
    };

    Flapp.prototype.addArg = function(arg) {
      return this.collector.addArg(arg);
    };

    Flapp.prototype.createBuildCommand = function(source, output, complete) {
      var bin;
      bin = 'mxmlc';
      return this.build.getSDKVersion((function(_this) {
        return function(version) {
          var arg, args, directory, library, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
          if (_this.build.isWindow()) {
            if (version > '4.6.0') {
              bin = 'mxmlc.bat';
            } else {
              bin = 'mxmlc.exe';
            }
          }
          args = [];
          args.push(_this.build.wrap($path.join(_this.build.getEnv('FLEX_HOME'), 'bin', bin)));
          args.push(_this.build.wrap(_this.build.resolvePath(source)));
          _ref = _this.collector.getLibraries();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            library = _ref[_i];
            args.push('-library-path ' + _this.build.wrap(library));
          }
          _ref1 = _this.collector.getExternalLibraries();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            library = _ref1[_j];
            args.push('-external-library-path ' + _this.build.wrap(library));
          }
          _ref2 = _this.collector.getSourceDirectories();
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            directory = _ref2[_k];
            args.push('-source-path ' + _this.build.wrap(directory));
          }
          _ref3 = _this.collector.getArgs();
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            arg = _ref3[_l];
            args.push(_this.build.applyEnv(arg));
          }
          output = _this.build.wrap(_this.build.resolvePath(output));
          args.push('-link-report ' + output.replace('.swf', '.xml'));
          args.push('-size-report ' + output.replace('.swf', '.size.xml'));
          args.push('-output ' + output);
          if (complete != null) {
            return complete(args.join(' '));
          }
        };
      })(this));
    };

    Flapp.prototype.create = function(source, output, complete) {
      return this.createBuildCommand(source, output, function(command) {
        return exec(command).run(complete);
      });
    };

    return Flapp;

  })();

  module.exports = Flapp;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZsYXBwLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEseUNBQUE7SUFBQSxrRkFBQTs7QUFBQSxFQUFBLElBQUEsR0FBTyxPQUFBLENBQVEsYUFBUixDQUFzQixDQUFDLElBQTlCLENBQUE7O0FBQUEsRUFDQSxJQUFBLEdBQU8sT0FBQSxDQUFRLFdBQVIsQ0FEUCxDQUFBOztBQUFBLEVBRUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxNQUFSLENBRlIsQ0FBQTs7QUFBQSxFQUdDLGtCQUFtQixPQUFBLENBQVEsV0FBUixFQUFuQixlQUhELENBQUE7O0FBQUEsRUFLTTtBQUNRLElBQUEsZUFBQyxLQUFELEdBQUE7QUFDWiw2Q0FBQSxDQUFBO0FBQUEscUVBQUEsQ0FBQTtBQUFBLDZDQUFBLENBQUE7QUFBQSxxRUFBQSxDQUFBO0FBQUEsdUZBQUEsQ0FBQTtBQUFBLHVFQUFBLENBQUE7QUFBQSxNQUFBLElBQUMsQ0FBQSxTQUFELEdBQWlCLElBQUEsZUFBQSxDQUFnQixLQUFoQixDQUFqQixDQUFBO0FBQUEsTUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTLEtBRFQsQ0FEWTtJQUFBLENBQWI7O0FBQUEsb0JBT0EsbUJBQUEsR0FBcUIsU0FBQyxJQUFELEdBQUE7YUFDcEIsSUFBQyxDQUFBLFNBQVMsQ0FBQyxtQkFBWCxDQUErQixJQUEvQixFQURvQjtJQUFBLENBUHJCLENBQUE7O0FBQUEsb0JBVUEsMkJBQUEsR0FBNkIsU0FBQyxJQUFELEdBQUE7YUFDNUIsSUFBQyxDQUFBLFNBQVMsQ0FBQywyQkFBWCxDQUF1QyxJQUF2QyxFQUQ0QjtJQUFBLENBVjdCLENBQUE7O0FBQUEsb0JBYUEsa0JBQUEsR0FBb0IsU0FBQyxJQUFELEdBQUE7YUFDbkIsSUFBQyxDQUFBLFNBQVMsQ0FBQyxrQkFBWCxDQUE4QixJQUE5QixFQURtQjtJQUFBLENBYnBCLENBQUE7O0FBQUEsb0JBZ0JBLE1BQUEsR0FBUSxTQUFDLEdBQUQsR0FBQTthQUNQLElBQUMsQ0FBQSxTQUFTLENBQUMsTUFBWCxDQUFrQixHQUFsQixFQURPO0lBQUEsQ0FoQlIsQ0FBQTs7QUFBQSxvQkFzQkEsa0JBQUEsR0FBb0IsU0FBQyxNQUFELEVBQVMsTUFBVCxFQUFpQixRQUFqQixHQUFBO0FBSW5CLFVBQUEsR0FBQTtBQUFBLE1BQUEsR0FBQSxHQUFNLE9BQU4sQ0FBQTthQUVBLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQixDQUFBLFNBQUEsS0FBQSxHQUFBO2VBQUEsU0FBQyxPQUFELEdBQUE7QUFDcEIsY0FBQSxtR0FBQTtBQUFBLFVBQUEsSUFBRyxLQUFDLENBQUEsS0FBSyxDQUFDLFFBQVAsQ0FBQSxDQUFIO0FBQ0MsWUFBQSxJQUFHLE9BQUEsR0FBVSxPQUFiO0FBQ0MsY0FBQSxHQUFBLEdBQU0sV0FBTixDQUREO2FBQUEsTUFBQTtBQUdDLGNBQUEsR0FBQSxHQUFNLFdBQU4sQ0FIRDthQUREO1dBQUE7QUFBQSxVQVNBLElBQUEsR0FBTyxFQVRQLENBQUE7QUFBQSxVQVdBLElBQUksQ0FBQyxJQUFMLENBQVUsS0FBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQVksS0FBSyxDQUFDLElBQU4sQ0FBVyxLQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsQ0FBYyxXQUFkLENBQVgsRUFBdUMsS0FBdkMsRUFBOEMsR0FBOUMsQ0FBWixDQUFWLENBWEEsQ0FBQTtBQUFBLFVBYUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxLQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsQ0FBWSxLQUFDLENBQUEsS0FBSyxDQUFDLFdBQVAsQ0FBbUIsTUFBbkIsQ0FBWixDQUFWLENBYkEsQ0FBQTtBQWVBO0FBQUEsZUFBQSwyQ0FBQTsrQkFBQTtBQUNDLFlBQUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxnQkFBQSxHQUFtQixLQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsQ0FBWSxPQUFaLENBQTdCLENBQUEsQ0FERDtBQUFBLFdBZkE7QUFrQkE7QUFBQSxlQUFBLDhDQUFBO2dDQUFBO0FBQ0MsWUFBQSxJQUFJLENBQUMsSUFBTCxDQUFVLHlCQUFBLEdBQTRCLEtBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxDQUFZLE9BQVosQ0FBdEMsQ0FBQSxDQUREO0FBQUEsV0FsQkE7QUFxQkE7QUFBQSxlQUFBLDhDQUFBO2tDQUFBO0FBQ0MsWUFBQSxJQUFJLENBQUMsSUFBTCxDQUFVLGVBQUEsR0FBa0IsS0FBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQVksU0FBWixDQUE1QixDQUFBLENBREQ7QUFBQSxXQXJCQTtBQTJCQTtBQUFBLGVBQUEsOENBQUE7NEJBQUE7QUFDQyxZQUFBLElBQUksQ0FBQyxJQUFMLENBQVUsS0FBQyxDQUFBLEtBQUssQ0FBQyxRQUFQLENBQWdCLEdBQWhCLENBQVYsQ0FBQSxDQUREO0FBQUEsV0EzQkE7QUFBQSxVQThCQSxNQUFBLEdBQVMsS0FBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQVksS0FBQyxDQUFBLEtBQUssQ0FBQyxXQUFQLENBQW1CLE1BQW5CLENBQVosQ0E5QlQsQ0FBQTtBQUFBLFVBaUNBLElBQUksQ0FBQyxJQUFMLENBQVUsZUFBQSxHQUFrQixNQUFNLENBQUMsT0FBUCxDQUFlLE1BQWYsRUFBdUIsTUFBdkIsQ0FBNUIsQ0FqQ0EsQ0FBQTtBQUFBLFVBb0NBLElBQUksQ0FBQyxJQUFMLENBQVUsZUFBQSxHQUFrQixNQUFNLENBQUMsT0FBUCxDQUFlLE1BQWYsRUFBdUIsV0FBdkIsQ0FBNUIsQ0FwQ0EsQ0FBQTtBQUFBLFVBdUNBLElBQUksQ0FBQyxJQUFMLENBQVUsVUFBQSxHQUFhLE1BQXZCLENBdkNBLENBQUE7QUF5Q0EsVUFBQSxJQUE0QixnQkFBNUI7bUJBQUEsUUFBQSxDQUFTLElBQUksQ0FBQyxJQUFMLENBQVUsR0FBVixDQUFULEVBQUE7V0ExQ29CO1FBQUEsRUFBQTtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBckIsRUFObUI7SUFBQSxDQXRCcEIsQ0FBQTs7QUFBQSxvQkF3RUEsTUFBQSxHQUFRLFNBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsUUFBakIsR0FBQTthQUNQLElBQUMsQ0FBQSxrQkFBRCxDQUFvQixNQUFwQixFQUE0QixNQUE1QixFQUFvQyxTQUFDLE9BQUQsR0FBQTtlQUNuQyxJQUFBLENBQUssT0FBTCxDQUFhLENBQUMsR0FBZCxDQUFrQixRQUFsQixFQURtQztNQUFBLENBQXBDLEVBRE87SUFBQSxDQXhFUixDQUFBOztpQkFBQTs7TUFORCxDQUFBOztBQUFBLEVBbUZBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBbkZqQixDQUFBO0FBQUEiLCJmaWxlIjoiZmxhcHAuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJwaWNrID0gcmVxdWlyZSgnZmlsZS1waWNrZXInKS5waWNrXG5leGVjID0gcmVxdWlyZSgnZG9uZS1leGVjJylcbiRwYXRoID0gcmVxdWlyZSgncGF0aCcpXG57U291cmNlQ29sbGVjdG9yfSA9IHJlcXVpcmUoJy4vZmx1dGlscycpXG5cbmNsYXNzIEZsYXBwXG5cdGNvbnN0cnVjdG9yOiAoYnVpbGQpIC0+XG5cdFx0QGNvbGxlY3RvciA9IG5ldyBTb3VyY2VDb2xsZWN0b3IoYnVpbGQpXG5cdFx0QGJ1aWxkID0gYnVpbGRcblxuXHQjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCMgc2V0dGluZ1xuXHQjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdGFkZExpYnJhcnlEaXJlY3Rvcnk6IChwYXRoKSA9PlxuXHRcdEBjb2xsZWN0b3IuYWRkTGlicmFyeURpcmVjdG9yeShwYXRoKVxuXG5cdGFkZEV4dGVybmFsTGlicmFyeURpcmVjdG9yeTogKHBhdGgpID0+XG5cdFx0QGNvbGxlY3Rvci5hZGRFeHRlcm5hbExpYnJhcnlEaXJlY3RvcnkocGF0aClcblxuXHRhZGRTb3VyY2VEaXJlY3Rvcnk6IChwYXRoKSA9PlxuXHRcdEBjb2xsZWN0b3IuYWRkU291cmNlRGlyZWN0b3J5KHBhdGgpXG5cblx0YWRkQXJnOiAoYXJnKSA9PlxuXHRcdEBjb2xsZWN0b3IuYWRkQXJnKGFyZylcblxuXHQjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCMgYnVpbGRcblx0Iz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHRjcmVhdGVCdWlsZENvbW1hbmQ6IChzb3VyY2UsIG91dHB1dCwgY29tcGxldGUpID0+XG5cdFx0Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHQjIDAgZ2V0IGV4ZWMgZmlsZVxuXHRcdCMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0YmluID0gJ214bWxjJ1xuXG5cdFx0QGJ1aWxkLmdldFNES1ZlcnNpb24gKHZlcnNpb24pID0+XG5cdFx0XHRpZiBAYnVpbGQuaXNXaW5kb3coKVxuXHRcdFx0XHRpZiB2ZXJzaW9uID4gJzQuNi4wJ1xuXHRcdFx0XHRcdGJpbiA9ICdteG1sYy5iYXQnXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRiaW4gPSAnbXhtbGMuZXhlJ1xuXG5cdFx0XHQjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFx0IyAxIGNyZWF0ZSBwYXRoIGFyZ3Ncblx0XHRcdCMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0XHRhcmdzID0gW11cblxuXHRcdFx0YXJncy5wdXNoKEBidWlsZC53cmFwKCRwYXRoLmpvaW4oQGJ1aWxkLmdldEVudignRkxFWF9IT01FJyksICdiaW4nLCBiaW4pKSlcblxuXHRcdFx0YXJncy5wdXNoKEBidWlsZC53cmFwKEBidWlsZC5yZXNvbHZlUGF0aChzb3VyY2UpKSlcblxuXHRcdFx0Zm9yIGxpYnJhcnkgaW4gQGNvbGxlY3Rvci5nZXRMaWJyYXJpZXMoKVxuXHRcdFx0XHRhcmdzLnB1c2goJy1saWJyYXJ5LXBhdGggJyArIEBidWlsZC53cmFwKGxpYnJhcnkpKVxuXG5cdFx0XHRmb3IgbGlicmFyeSBpbiBAY29sbGVjdG9yLmdldEV4dGVybmFsTGlicmFyaWVzKClcblx0XHRcdFx0YXJncy5wdXNoKCctZXh0ZXJuYWwtbGlicmFyeS1wYXRoICcgKyBAYnVpbGQud3JhcChsaWJyYXJ5KSlcblxuXHRcdFx0Zm9yIGRpcmVjdG9yeSBpbiBAY29sbGVjdG9yLmdldFNvdXJjZURpcmVjdG9yaWVzKClcblx0XHRcdFx0YXJncy5wdXNoKCctc291cmNlLXBhdGggJyArIEBidWlsZC53cmFwKGRpcmVjdG9yeSkpXG5cblx0XHRcdCMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0XHQjIDIgYXJncywgb3V0cHV0XG5cdFx0XHQjLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFx0Zm9yIGFyZyBpbiBAY29sbGVjdG9yLmdldEFyZ3MoKVxuXHRcdFx0XHRhcmdzLnB1c2goQGJ1aWxkLmFwcGx5RW52KGFyZykpXG5cblx0XHRcdG91dHB1dCA9IEBidWlsZC53cmFwKEBidWlsZC5yZXNvbHZlUGF0aChvdXRwdXQpKVxuXG5cdFx0XHQjIGxpbmstcmVwb3J0XG5cdFx0XHRhcmdzLnB1c2goJy1saW5rLXJlcG9ydCAnICsgb3V0cHV0LnJlcGxhY2UoJy5zd2YnLCAnLnhtbCcpKVxuXG5cdFx0XHQjIHNpemUtcmVwb3J0XG5cdFx0XHRhcmdzLnB1c2goJy1zaXplLXJlcG9ydCAnICsgb3V0cHV0LnJlcGxhY2UoJy5zd2YnLCAnLnNpemUueG1sJykpXG5cblx0XHRcdCMgc3dmXG5cdFx0XHRhcmdzLnB1c2goJy1vdXRwdXQgJyArIG91dHB1dClcblxuXHRcdFx0Y29tcGxldGUoYXJncy5qb2luKCcgJykpIGlmIGNvbXBsZXRlP1xuXHRcdFx0XG5cdGNyZWF0ZTogKHNvdXJjZSwgb3V0cHV0LCBjb21wbGV0ZSkgPT5cblx0XHRAY3JlYXRlQnVpbGRDb21tYW5kIHNvdXJjZSwgb3V0cHV0LCAoY29tbWFuZCkgLT5cblx0XHRcdGV4ZWMoY29tbWFuZCkucnVuKGNvbXBsZXRlKVxuXHRcdFxuXG5tb2R1bGUuZXhwb3J0cyA9IEZsYXBwIl19