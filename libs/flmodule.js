(function() {
  var $fs, $path, Flmodule, SourceCollector, exec, pick,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $fs = require('fs');

  $path = require('path');

  pick = require('file-picker').pick;

  exec = require('done-exec');

  SourceCollector = require('./flutils').SourceCollector;

  Flmodule = (function() {
    function Flmodule(build) {
      this.create = __bind(this.create, this);
      this.createBuildCommand = __bind(this.createBuildCommand, this);
      this.addArg = __bind(this.addArg, this);
      this.addSourceDirectory = __bind(this.addSourceDirectory, this);
      this.addExternalLibraryDirectory = __bind(this.addExternalLibraryDirectory, this);
      this.addLibraryDirectory = __bind(this.addLibraryDirectory, this);
      this.collector = new SourceCollector(build);
      this.build = build;
    }

    Flmodule.prototype.addLibraryDirectory = function(path) {
      return this.collector.addLibraryDirectory(path);
    };

    Flmodule.prototype.addExternalLibraryDirectory = function(path) {
      return this.collector.addExternalLibraryDirectory(path);
    };

    Flmodule.prototype.addSourceDirectory = function(path) {
      return this.collector.addSourceDirectory(path);
    };

    Flmodule.prototype.addArg = function(arg) {
      return this.collector.addArg(arg);
    };

    Flmodule.prototype.createBuildCommand = function(report, source, output, complete) {
      var bin;
      bin = 'mxmlc';
      return this.build.getSDKVersion((function(_this) {
        return function(version) {
          var arg, args, directory, library, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
          if (_this.build.isWindow()) {
            if (version > '4.6.0') {
              bin = 'mxmlc.bat';
            } else {
              bin = 'mxmlc.exe';
            }
          }
          args = [];
          args.push(_this.build.wrap($path.join(_this.build.getEnv('FLEX_HOME'), 'bin', bin)));
          args.push(_this.build.wrap(_this.build.resolvePath(source)));
          _ref = _this.collector.getLibraries();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            library = _ref[_i];
            args.push('-library-path ' + _this.build.wrap(library));
          }
          _ref1 = _this.collector.getExternalLibraries();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            library = _ref1[_j];
            args.push('-external-library-path ' + _this.build.wrap(library));
          }
          _ref2 = _this.collector.getSourceDirectories();
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            directory = _ref2[_k];
            args.push('-source-path ' + _this.build.wrap(directory));
          }
          _ref3 = _this.collector.getArgs();
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            arg = _ref3[_l];
            args.push(_this.build.applyEnv(arg));
          }
          output = _this.build.wrap(_this.build.resolvePath(output));
          report = (report != null) && $fs.existsSync(_this.build.resolvePath(report)) ? _this.build.wrap(_this.build.resolvePath(report)) : null;
          args.push('-size-report ' + output.replace('.swf', '.size.xml'));
          args.push('-output ' + output);
          if (report != null) {
            args.push('-load-externs ' + report);
          }
          if (complete != null) {
            return complete(args.join(' '));
          }
        };
      })(this));
    };

    Flmodule.prototype.create = function(report, source, output, complete) {
      return this.createBuildCommand(report, source, output, function(command) {
        return exec(command).run(complete);
      });
    };

    return Flmodule;

  })();

  module.exports = Flmodule;

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LENBQUMsSUFBTCxDQUFVLGdCQUFBLEdBQW1CLE1BQTdCLENBQUEsQ0FBQTtXQXhDQTtBQTBDQSxVQUFBLElBQTRCLGdCQUE1QjttQkFBQSxRQUFBLENBQVMsSUFBSSxDQUFDLElBQUwsQ0FBVSxHQUFWLENBQVQsRUFBQTtXQTNDb0I7UUFBQSxFQUFBO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFyQixFQU5tQjtJQUFBLENBdEJwQixDQUFBOztBQUFBLHVCQXlFQSxNQUFBLEdBQVEsU0FBQyxNQUFELEVBQVMsTUFBVCxFQUFpQixNQUFqQixFQUF5QixRQUF6QixHQUFBO2FBQ1AsSUFBQyxDQUFBLGtCQUFELENBQW9CLE1BQXBCLEVBQTRCLE1BQTVCLEVBQW9DLE1BQXBDLEVBQTRDLFNBQUMsT0FBRCxHQUFBO2VBQzNDLElBQUEsQ0FBSyxPQUFMLENBQWEsQ0FBQyxHQUFkLENBQWtCLFFBQWxCLEVBRDJDO01BQUEsQ0FBNUMsRUFETztJQUFBLENBekVSLENBQUE7O29CQUFBOztNQVBELENBQUE7O0FBQUEsRUFvRkEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsUUFwRmpCLENBQUE7QUFBQSIsImZpbGUiOiJmbG1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIiRmcyA9IHJlcXVpcmUoJ2ZzJylcbiRwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5waWNrID0gcmVxdWlyZSgnZmlsZS1waWNrZXInKS5waWNrXG5leGVjID0gcmVxdWlyZSgnZG9uZS1leGVjJylcbntTb3VyY2VDb2xsZWN0b3J9ID0gcmVxdWlyZSgnLi9mbHV0aWxzJylcblxuY2xhc3MgRmxtb2R1bGVcblx0Y29uc3RydWN0b3I6IChidWlsZCkgLT5cblx0XHRAY29sbGVjdG9yID0gbmV3IFNvdXJjZUNvbGxlY3RvcihidWlsZClcblx0XHRAYnVpbGQgPSBidWlsZFxuXG5cdCM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0IyBpbXBsZW1lbnRzXG5cdCM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0YWRkTGlicmFyeURpcmVjdG9yeTogKHBhdGgpID0+XG5cdFx0QGNvbGxlY3Rvci5hZGRMaWJyYXJ5RGlyZWN0b3J5KHBhdGgpXG5cblx0YWRkRXh0ZXJuYWxMaWJyYXJ5RGlyZWN0b3J5OiAocGF0aCkgPT5cblx0XHRAY29sbGVjdG9yLmFkZEV4dGVybmFsTGlicmFyeURpcmVjdG9yeShwYXRoKVxuXG5cdGFkZFNvdXJjZURpcmVjdG9yeTogKHBhdGgpID0+XG5cdFx0QGNvbGxlY3Rvci5hZGRTb3VyY2VEaXJlY3RvcnkocGF0aClcblxuXHRhZGRBcmc6IChhcmcpID0+XG5cdFx0QGNvbGxlY3Rvci5hZGRBcmcoYXJnKVxuXG5cdCM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0IyBwcm9jZXNzXG5cdCM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0Y3JlYXRlQnVpbGRDb21tYW5kOiAocmVwb3J0LCBzb3VyY2UsIG91dHB1dCwgY29tcGxldGUpID0+XG5cdFx0Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdCMgMCBnZXQgZXhlYyBmaWxlXG5cdFx0Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdGJpbiA9ICdteG1sYydcblxuXHRcdEBidWlsZC5nZXRTREtWZXJzaW9uICh2ZXJzaW9uKSA9PlxuXHRcdFx0aWYgQGJ1aWxkLmlzV2luZG93KClcblx0XHRcdFx0aWYgdmVyc2lvbiA+ICc0LjYuMCdcblx0XHRcdFx0XHRiaW4gPSAnbXhtbGMuYmF0J1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0YmluID0gJ214bWxjLmV4ZSdcblxuXHRcdFx0Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdCMgMSA6IGNyZWF0ZSBwYXRoIGFyZ3Ncblx0XHRcdCMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0XHRhcmdzID0gW11cblxuXHRcdFx0YXJncy5wdXNoKEBidWlsZC53cmFwKCRwYXRoLmpvaW4oQGJ1aWxkLmdldEVudignRkxFWF9IT01FJyksICdiaW4nLCBiaW4pKSlcblxuXHRcdFx0YXJncy5wdXNoKEBidWlsZC53cmFwKEBidWlsZC5yZXNvbHZlUGF0aChzb3VyY2UpKSlcblxuXHRcdFx0Zm9yIGxpYnJhcnkgaW4gQGNvbGxlY3Rvci5nZXRMaWJyYXJpZXMoKVxuXHRcdFx0XHRhcmdzLnB1c2goJy1saWJyYXJ5LXBhdGggJyArIEBidWlsZC53cmFwKGxpYnJhcnkpKVxuXG5cdFx0XHRmb3IgbGlicmFyeSBpbiBAY29sbGVjdG9yLmdldEV4dGVybmFsTGlicmFyaWVzKClcblx0XHRcdFx0YXJncy5wdXNoKCctZXh0ZXJuYWwtbGlicmFyeS1wYXRoICcgKyBAYnVpbGQud3JhcChsaWJyYXJ5KSlcblxuXHRcdFx0Zm9yIGRpcmVjdG9yeSBpbiBAY29sbGVjdG9yLmdldFNvdXJjZURpcmVjdG9yaWVzKClcblx0XHRcdFx0YXJncy5wdXNoKCctc291cmNlLXBhdGggJyArIEBidWlsZC53cmFwKGRpcmVjdG9yeSkpXG5cblx0XHRcdCMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0XHQjIDIgOiBhcmdzLCBvdXRwdXRcblx0XHRcdCMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0XHRmb3IgYXJnIGluIEBjb2xsZWN0b3IuZ2V0QXJncygpXG5cdFx0XHRcdGFyZ3MucHVzaChAYnVpbGQuYXBwbHlFbnYoYXJnKSlcblxuXHRcdFx0b3V0cHV0ID0gQGJ1aWxkLndyYXAoQGJ1aWxkLnJlc29sdmVQYXRoKG91dHB1dCkpXG5cdFx0XHRyZXBvcnQgPSBpZiByZXBvcnQ/IGFuZCAkZnMuZXhpc3RzU3luYyhAYnVpbGQucmVzb2x2ZVBhdGgocmVwb3J0KSkgdGhlbiBAYnVpbGQud3JhcChAYnVpbGQucmVzb2x2ZVBhdGgocmVwb3J0KSkgZWxzZSBudWxsXG5cblx0XHRcdCMgc2l6ZS1yZXBvcnRcblx0XHRcdGFyZ3MucHVzaCgnLXNpemUtcmVwb3J0ICcgKyBvdXRwdXQucmVwbGFjZSgnLnN3ZicsICcuc2l6ZS54bWwnKSlcblxuXHRcdFx0IyBzd2Zcblx0XHRcdGFyZ3MucHVzaCgnLW91dHB1dCAnICsgb3V0cHV0KVxuXG5cdFx0XHQjIHJlcG9ydFxuXHRcdFx0YXJncy5wdXNoKCctbG9hZC1leHRlcm5zICcgKyByZXBvcnQpIGlmIHJlcG9ydD9cblxuXHRcdFx0Y29tcGxldGUoYXJncy5qb2luKCcgJykpIGlmIGNvbXBsZXRlP1xuXHRcdFx0XG5cdGNyZWF0ZTogKHJlcG9ydCwgc291cmNlLCBvdXRwdXQsIGNvbXBsZXRlKSA9PlxuXHRcdEBjcmVhdGVCdWlsZENvbW1hbmQgcmVwb3J0LCBzb3VyY2UsIG91dHB1dCwgKGNvbW1hbmQpIC0+XG5cdFx0XHRleGVjKGNvbW1hbmQpLnJ1bihjb21wbGV0ZSlcblxubW9kdWxlLmV4cG9ydHMgPSBGbG1vZHVsZSJdfQ==