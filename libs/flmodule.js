(function() {
  var $fs, Flmodule, SourceCollector, exec, pick,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $fs = require('fs');

  pick = require('file-picker').pick;

  exec = require('done-exec');

  SourceCollector = require('./flutils').SourceCollector;

  Flmodule = (function() {
    function Flmodule(build) {
      this.create = __bind(this.create, this);
      this.createBuildCommand = __bind(this.createBuildCommand, this);
      this.addArg = __bind(this.addArg, this);
      this.addSourceDirectory = __bind(this.addSourceDirectory, this);
      this.addExternalLibraryDirectory = __bind(this.addExternalLibraryDirectory, this);
      this.addLibraryDirectory = __bind(this.addLibraryDirectory, this);
      this.collector = new SourceCollector(build);
      this.build = build;
    }

    Flmodule.prototype.addLibraryDirectory = function(path) {
      return this.collector.addLibraryDirectory(path);
    };

    Flmodule.prototype.addExternalLibraryDirectory = function(path) {
      return this.collector.addExternalLibraryDirectory(path);
    };

    Flmodule.prototype.addSourceDirectory = function(path) {
      return this.collector.addSourceDirectory(path);
    };

    Flmodule.prototype.addArg = function(arg) {
      return this.collector.addArg(arg);
    };

    Flmodule.prototype.createBuildCommand = function(report, source, output, complete) {
      var bin;
      bin = 'mxmlc';
      return this.build.getSDKVersion((function(_this) {
        return function(version) {
          var arg, args, directory, library, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
          if (process.platform.indexOf('win') === 0) {
            if (version > '4.6.0') {
              bin = 'mxmlc.bat';
            } else {
              bin = 'mxmlc.exe';
            }
          }
          args = [];
          args.push(_this.build.wrap(_this.build.getEnv('FLEX_HOME') + '/bin/' + bin));
          args.push(_this.build.wrap(_this.build.resolvePath(source)));
          _ref = _this.collector.getLibraries();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            library = _ref[_i];
            args.push('-library-path ' + _this.build.wrap(library));
          }
          _ref1 = _this.collector.getExternalLibraries();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            library = _ref1[_j];
            args.push('-external-library-path ' + _this.build.wrap(library));
          }
          _ref2 = _this.collector.getSourceDirectories();
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            directory = _ref2[_k];
            args.push('-source-path ' + _this.build.wrap(directory));
          }
          _ref3 = _this.collector.getArgs();
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            arg = _ref3[_l];
            args.push(_this.build.applyEnv(arg));
          }
          output = _this.build.wrap(_this.build.resolvePath(output));
          report = (report != null) && $fs.existsSync(_this.build.resolvePath(report)) ? _this.build.wrap(_this.build.resolvePath(report)) : null;
          args.push('-size-report ' + output.replace('.swf', '.size.xml'));
          args.push('-output ' + output);
          if (report != null) {
            args.push('-load-externs ' + report);
          }
          if (complete != null) {
            return complete(args.join(' '));
          }
        };
      })(this));
    };

    Flmodule.prototype.create = function(report, source, output, complete) {
      return this.createBuildCommand(report, source, output, function(command) {
        return exec(command).run(complete);
      });
    };

    return Flmodule;

  })();

  module.exports = Flmodule;

}).call(this);

//# sourceMappingURL=data:application/json;base64,