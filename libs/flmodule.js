(function() {
  var $fs, Flmodule, SourceCollector, pick,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $fs = require('fs');

  pick = require('file-picker').pick;

  SourceCollector = require('./flutils').SourceCollector;

  Flmodule = (function() {
    function Flmodule(build) {
      this.createBuildCommand = __bind(this.createBuildCommand, this);
      this.addArg = __bind(this.addArg, this);
      this.addSourceDirectory = __bind(this.addSourceDirectory, this);
      this.addExternalLibraryDirectory = __bind(this.addExternalLibraryDirectory, this);
      this.addLibraryDirectory = __bind(this.addLibraryDirectory, this);
      this.collector = new SourceCollector(build);
      this.build = build;
    }

    Flmodule.prototype.addLibraryDirectory = function(path) {
      return this.collector.addLibraryDirectory(path);
    };

    Flmodule.prototype.addExternalLibraryDirectory = function(path) {
      return this.collector.addExternalLibraryDirectory(path);
    };

    Flmodule.prototype.addSourceDirectory = function(path) {
      return this.collector.addSourceDirectory(path);
    };

    Flmodule.prototype.addArg = function(arg) {
      return this.collector.addArg(arg);
    };

    Flmodule.prototype.createBuildCommand = function(report, source, output, complete) {
      var bin;
      bin = 'mxmlc';
      return this.build.getSDKVersion((function(_this) {
        return function(version) {
          var arg, args, directory, library, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
          if (process.platform.indexOf('win') === 0) {
            if (version > '4.6.0') {
              bin = 'mxmlc.bat';
            } else {
              bin = 'mxmlc.exe';
            }
          }
          args = [];
          args.push(_this.build.wrap(_this.build.getEnv('FLEX_HOME') + '/bin/' + bin));
          args.push(_this.build.wrap(_this.build.resolvePath(source)));
          _ref = _this.collector.getLibraries();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            library = _ref[_i];
            args.push('-library-path ' + _this.build.wrap(library));
          }
          _ref1 = _this.collector.getExternalLibraries();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            library = _ref1[_j];
            args.push('-external-library-path ' + _this.build.wrap(library));
          }
          _ref2 = _this.collector.getSourceDirectories();
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            directory = _ref2[_k];
            args.push('-source-path ' + _this.build.wrap(directory));
          }
          _ref3 = _this.collector.getArgs();
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            arg = _ref3[_l];
            args.push(_this.build.applyEnv(arg));
          }
          output = _this.build.wrap(_this.build.resolvePath(output));
          report = (report != null) && $fs.existsSync(_this.build.resolvePath(report)) ? _this.build.wrap(_this.build.resolvePath(report)) : null;
          args.push('-output ' + output);
          if (report != null) {
            args.push('-load-externs ' + report);
          }
          if (complete != null) {
            return complete(args.join(' '));
          }
        };
      })(this));
    };

    return Flmodule;

  })();

  module.exports = Flmodule;

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QUE7O0FBQUEsRUE0RUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsUUE1RWpCLENBQUE7QUFBQSIsImZpbGUiOiJmbG1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIiRmcyA9IHJlcXVpcmUoJ2ZzJylcbnBpY2sgPSByZXF1aXJlKCdmaWxlLXBpY2tlcicpLnBpY2tcbntTb3VyY2VDb2xsZWN0b3J9ID0gcmVxdWlyZSgnLi9mbHV0aWxzJylcblxuY2xhc3MgRmxtb2R1bGVcblx0Y29uc3RydWN0b3I6IChidWlsZCkgLT5cblx0XHRAY29sbGVjdG9yID0gbmV3IFNvdXJjZUNvbGxlY3RvcihidWlsZClcblx0XHRAYnVpbGQgPSBidWlsZFxuXG5cdCMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0IyBpbXBsZW1lbnRzXG5cdCMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0YWRkTGlicmFyeURpcmVjdG9yeTogKHBhdGgpID0+XG5cdFx0QGNvbGxlY3Rvci5hZGRMaWJyYXJ5RGlyZWN0b3J5KHBhdGgpXG5cblx0YWRkRXh0ZXJuYWxMaWJyYXJ5RGlyZWN0b3J5OiAocGF0aCkgPT5cblx0XHRAY29sbGVjdG9yLmFkZEV4dGVybmFsTGlicmFyeURpcmVjdG9yeShwYXRoKVxuXG5cdGFkZFNvdXJjZURpcmVjdG9yeTogKHBhdGgpID0+XG5cdFx0QGNvbGxlY3Rvci5hZGRTb3VyY2VEaXJlY3RvcnkocGF0aClcblxuXHRhZGRBcmc6IChhcmcpID0+XG5cdFx0QGNvbGxlY3Rvci5hZGRBcmcoYXJnKVxuXG5cdCMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0IyBwcm9jZXNzXG5cdCMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0Y3JlYXRlQnVpbGRDb21tYW5kOiAocmVwb3J0LCBzb3VyY2UsIG91dHB1dCwgY29tcGxldGUpID0+XG5cdFx0Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdCMgMCBnZXQgZXhlYyBmaWxlXG5cdFx0Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdGJpbiA9ICdteG1sYydcblxuXHRcdEBidWlsZC5nZXRTREtWZXJzaW9uICh2ZXJzaW9uKSA9PlxuXHRcdFx0aWYgcHJvY2Vzcy5wbGF0Zm9ybS5pbmRleE9mKCd3aW4nKSBpcyAwXG5cdFx0XHRcdGlmIHZlcnNpb24gPiAnNC42LjAnXG5cdFx0XHRcdFx0YmluID0gJ214bWxjLmJhdCdcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGJpbiA9ICdteG1sYy5leGUnXG5cblx0XHRcdCMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0XHQjIDEgOiBjcmVhdGUgcGF0aCBhcmdzXG5cdFx0XHQjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdFx0YXJncyA9IFtdXG5cblx0XHRcdGFyZ3MucHVzaChAYnVpbGQud3JhcChAYnVpbGQuZ2V0RW52KCdGTEVYX0hPTUUnKSArICcvYmluLycgKyBiaW4pKVxuXG5cdFx0XHRhcmdzLnB1c2goQGJ1aWxkLndyYXAoQGJ1aWxkLnJlc29sdmVQYXRoKHNvdXJjZSkpKVxuXG5cdFx0XHRmb3IgbGlicmFyeSBpbiBAY29sbGVjdG9yLmdldExpYnJhcmllcygpXG5cdFx0XHRcdGFyZ3MucHVzaCgnLWxpYnJhcnktcGF0aCAnICsgQGJ1aWxkLndyYXAobGlicmFyeSkpXG5cblx0XHRcdGZvciBsaWJyYXJ5IGluIEBjb2xsZWN0b3IuZ2V0RXh0ZXJuYWxMaWJyYXJpZXMoKVxuXHRcdFx0XHRhcmdzLnB1c2goJy1leHRlcm5hbC1saWJyYXJ5LXBhdGggJyArIEBidWlsZC53cmFwKGxpYnJhcnkpKVxuXG5cdFx0XHRmb3IgZGlyZWN0b3J5IGluIEBjb2xsZWN0b3IuZ2V0U291cmNlRGlyZWN0b3JpZXMoKVxuXHRcdFx0XHRhcmdzLnB1c2goJy1zb3VyY2UtcGF0aCAnICsgQGJ1aWxkLndyYXAoZGlyZWN0b3J5KSlcblxuXHRcdFx0IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdCMgMiA6IGFyZ3MsIG91dHB1dFxuXHRcdFx0IyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdGZvciBhcmcgaW4gQGNvbGxlY3Rvci5nZXRBcmdzKClcblx0XHRcdFx0YXJncy5wdXNoKEBidWlsZC5hcHBseUVudihhcmcpKVxuXG5cdFx0XHRvdXRwdXQgPSBAYnVpbGQud3JhcChAYnVpbGQucmVzb2x2ZVBhdGgob3V0cHV0KSlcblx0XHRcdHJlcG9ydCA9IGlmIHJlcG9ydD8gYW5kICRmcy5leGlzdHNTeW5jKEBidWlsZC5yZXNvbHZlUGF0aChyZXBvcnQpKSB0aGVuIEBidWlsZC53cmFwKEBidWlsZC5yZXNvbHZlUGF0aChyZXBvcnQpKSBlbHNlIG51bGxcblxuXHRcdFx0IyBzd2Zcblx0XHRcdGFyZ3MucHVzaCgnLW91dHB1dCAnICsgb3V0cHV0KVxuXG5cdFx0XHQjIHJlcG9ydFxuXHRcdFx0YXJncy5wdXNoKCctbG9hZC1leHRlcm5zICcgKyByZXBvcnQpIGlmIHJlcG9ydD9cblxuXHRcdFx0aWYgY29tcGxldGU/XG5cdFx0XHRcdGNvbXBsZXRlKGFyZ3Muam9pbignICcpKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZsbW9kdWxlIl19