(function() {
  var $path, Fllib, SourceCollector, async, exec, fs, pick,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  $path = require('path');

  async = require('async');

  exec = require('done-exec');

  pick = require('file-picker').pick;

  SourceCollector = require('./flutils').SourceCollector;

  Fllib = (function() {
    function Fllib(build) {
      this.create = __bind(this.create, this);
      this.createBuildCommand = __bind(this.createBuildCommand, this);
      this.addArg = __bind(this.addArg, this);
      this.addSourceDirectory = __bind(this.addSourceDirectory, this);
      this.addExternalLibraryDirectory = __bind(this.addExternalLibraryDirectory, this);
      this.addLibraryDirectory = __bind(this.addLibraryDirectory, this);
      this.setFilterFunction = __bind(this.setFilterFunction, this);
      this.collector = new SourceCollector(build);
      this.build = build;
    }

    Fllib.prototype.setFilterFunction = function(func) {
      return this.filterFunction = func;
    };

    Fllib.prototype.addLibraryDirectory = function(path) {
      return this.collector.addLibraryDirectory(path);
    };

    Fllib.prototype.addExternalLibraryDirectory = function(path) {
      return this.collector.addExternalLibraryDirectory(path);
    };

    Fllib.prototype.addSourceDirectory = function(path) {
      return this.collector.addSourceDirectory(path);
    };

    Fllib.prototype.addArg = function(arg) {
      return this.collector.addArg(arg);
    };

    Fllib.prototype.createBuildCommand = function(output, complete) {
      var bin;
      bin = 'compc';
      return this.build.getSDKVersion((function(_this) {
        return function(version) {
          var args, directory, library, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
          if (_this.build.isWindow()) {
            if (version > '4.6.0') {
              bin = 'compc.bat';
            } else {
              bin = 'compc.exe';
            }
          }
          args = [];
          args.push(_this.build.wrap($path.join(_this.build.getEnv('FLEX_HOME'), 'bin', bin)));
          _ref = _this.collector.getLibraries();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            library = _ref[_i];
            args.push('-library-path ' + _this.build.wrap(library));
          }
          _ref1 = _this.collector.getExternalLibraries();
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            library = _ref1[_j];
            args.push('-external-library-path ' + _this.build.wrap(library));
          }
          _ref2 = _this.collector.getSourceDirectories();
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            directory = _ref2[_k];
            args.push('-source-path ' + _this.build.wrap(directory));
          }
          return _this.collector.getIncludeClasses(_this.filterFunction, function(classPaths) {
            args.push('-include-classes ' + classPaths.join(' '));
            return _this.collector.getManifest(function(namespaces) {
              var arg, component, components, manifestCount, manifestFile, manifestSource, namespace, _l, _len3, _len4, _m, _ref3;
              manifestCount = 0;
              for (namespace in namespaces) {
                components = namespaces[namespace];
                manifestSource = '<?xml version="1.0" encoding="utf-8"?>\n';
                manifestSource += '<componentPackage>\n';
                for (_l = 0, _len3 = components.length; _l < _len3; _l++) {
                  component = components[_l];
                  if (classPaths.indexOf(component.path) > -1) {
                    manifestSource += "<component id='" + component.name + "' class='" + component.path + "'/>\n";
                  }
                }
                manifestSource += '</componentPackage>';
                manifestFile = "manifest" + manifestCount + ".xml";
                fs.writeFileSync(manifestFile, manifestSource, {
                  encoding: 'utf8'
                });
                args.push("-namespace " + namespace + " " + manifestFile);
                args.push("-include-namespaces " + namespace);
                manifestCount++;
              }
              _ref3 = _this.collector.getArgs();
              for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
                arg = _ref3[_m];
                args.push(_this.build.applyEnv(arg));
              }
              args.push('-output ' + _this.build.wrap(_this.build.resolvePath(output)));
              if (complete != null) {
                return complete(args.join(' '));
              }
            });
          });
        };
      })(this));
    };

    Fllib.prototype.create = function(output, complete) {
      return this.createBuildCommand(output, function(command) {
        return exec(command).run(complete);
      });
    };

    return Fllib;

  })();

  module.exports = Fllib;

}).call(this);

//# sourceMappingURL=data:application/json;base64,